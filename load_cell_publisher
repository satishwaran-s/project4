
/**
 * Complete project details at https://RandomNerdTutorials.com/arduino-load-cell-hx711/
 *
 * HX711 library for Arduino - example file
 * https://github.com/bogde/HX711
 *
 * MIT Licensea
 * (c) 2018 Bogdan Necula
 *
**/

#include <Arduino.h>
#include "HX711.h"
#include <ros.h>
#include <std_msgs/Bool.h>

ros::NodeHandle nh;

std_msgs::Bool limit_value;
ros::Publisher Limit("Limit", &limit_value);

char limitreach[2] = "5";


// HX711 circuit wiring
const int LOADCELL_DOUT_PIN = 2;
const int LOADCELL_SCK_PIN = 3;

int threshold = 5500; //max weight capped at 5.5kg
bool maxlimit = false;



HX711 scale;



void setup() {
  nh.initNode();
  //publisher
  nh.advertise(Limit); 
  
  Serial.begin(57600);
  Serial.println("HX711 Demo");
  Serial.println("Initializing the scale");

  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
//
//  Serial.println("Before setting up the scale:");
//  Serial.print("read: \t\t");
  Serial.println(scale.read());      // print a raw reading from the ADC
//
//  Serial.print("read average: \t\t");
//  Serial.println(scale.read_average(20));   // print the average of 20 readings from the ADC
//
//  Serial.print("get value: \t\t");
//  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight (not set yet)
//
//  Serial.print("get units: \t\t");
//  Serial.println(scale.get_units(5), 1);  // print the average of 5 readings from the ADC minus tare weight (not set) divided
            // by the SCALE parameter (not set yet)
            
//  scale.set_scale(414.338);
  //scale.set_scale(-471.497);                      // this value is obtained by calibrating the scale with known weights; see the README for details
  scale.set_scale(224.27);
  scale.tare();               // reset the scale to 0

//  Serial.println("After setting up the scale:");

//  Serial.print("read: \t\t");
//  Serial.println(scale.read());                 // print a raw reading from the ADC

//  Serial.print("read average: \t\t");
//  Serial.println(scale.read_average(20));       // print the average of 20 readings from the ADC

//  Serial.print("get value: \t\t");
//  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight, set with tare()

//  Serial.print("get units: \t\t");
//  Serial.println(scale.get_units(5), 1);        // print the average of 5 readings from the ADC minus tare weight, divided
            // by the SCALE parameter set with set_scale

  Serial.println("Readings:");
}

void loop() {
  int limit = 0;
  Serial.print("one reading:\t");
  Serial.println(scale.get_units(), 1);
  if(scale.get_units(10) > 5500){
    Serial.println("LIMIT REACHED");
  }
 
  limit_value.data = 0;
  Limit.publish( &limit_value );
  nh.spinOnce(); //callback
  delay(1000);
  /*
  //bool limitreach = !scale.read();

  //limit_value.data = limitreach;
  limit.publish (&limit_value);
  nh.spinOnce(); //callback
  delay(1000);
*/

/*
  int sensorvalue = scale.read(); //read sensor value

  if (sensorvalue > threshold)
  {
    if (!maxlimit)
    {
      //Serial.println("this da limit"); //to  be seen on serial viewer
      maxlimit = true;
      //str_msg.data = message;
      limit.publish(&maxlimit);
      
      delay(1000);
    }
    nh.spinOnce(); //callback
  }
  else
  {
    maxlimit = false;
  }
  */

  
//  Serial.print(scale.get_units(), 1);
//  Serial.print("\t| average:\t");
//  Serial.println(scale.get_units(10), 5);

  delay(3000);
}
